; monkey_tree1.kn
;    フラクタル幾何学(マンデルブロ), p. 31

const WINDOW_WIDTH: float :: 800.0
const WINDOW_HEIGHT: float :: 300.0

class Point()
	+var x: float
	+var y: float
	
	+func rotate(rad: float): @Point
		var x: float :: lib@cos(rad) * me.x + lib@sin(rad) * me.y
		var y: float :: -lib@sin(rad) * me.x + lib@cos(rad) * me.y
		ret @pt(x, y)
	end func
	
	+func add(p: @Point): @Point
		ret @pt(me.x + p.x, me.y + p.y)
	end func
	
	+func sub(p: @Point): @Point
		ret @pt(me.x - p.x, me.y - p.y)
	end func
	
	+func scale(k: float): @Point
		ret @pt(k * me.x, k * me.y)
	end func
end class

func pt(x: float, y: float): @Point
	var res: @Point :: #@Point
	do res.x :: x
	do res.y :: y
	ret res
end func

func top(left: @Point, right: @Point): @Point
	ret left.add(right.sub(left).rotate(lib@pi / 3.0))
end func

func div12(p1: @Point, p2: @Point): @Point
	ret p1.add(p2.sub(p1).scale(1.0 / 3.0))
end func

; ジェネレータの作成

func getGenerator1(left: @Point, right: @Point): []@Point
	var top: @Point :: @top(left, right)
	var ptl: @Point :: @div12(top, left)
	var ptr: @Point :: @div12(top, right)
	var prt: @Point :: @div12(right, top)
	var plr: @Point :: @div12(left, right)
	
	var ary: []@Point :: [
	|left, @div12(left, top), ptl, ptr, prt,
	|@div12(prt, ptl), @div12(ptl, prt), @div12(ptl, plr),
	|@div12(plr, ptl), plr, @div12(right, left), right]
	ret ary
end func

; メインコード

var wndMain: wnd@Wnd
var drawMain: wnd@Draw

func main()
	do @wndMain :: wnd@makeWnd(
	|null, %fix, @WINDOW_WIDTH $ int, @WINDOW_HEIGHT $ int,
	|"猿の木(ジェネレーター)")
	do @drawMain :: wnd@makeDraw(@wndMain,
	|0, 0, @WINDOW_WIDTH $ int, @WINDOW_HEIGHT $ int,
	|%scale, %scale, false)
	
	var left1: @Point :: @pt(50.0, 220.0)
	var right1: @Point :: @pt(320.0, 220.0)
	var top1: @Point :: @top(left1, right1)
	var gen1: []@Point
	|:: @getGenerator1(left1, right1)
	
	while(wnd@act())
		do draw@rect(0.0, 0.0, @WINDOW_WIDTH, @WINDOW_HEIGHT, 0xFFFFFFFF)
		do draw@line(left1.x, left1.y, top1.x, top1.y, 0xFFCCCCFF)
		do draw@line(right1.x, right1.y, top1.x, top1.y, 0xFFCCCCFF)
		do draw@line(left1.x, left1.y, right1.x, right1.y, 0xFFCCCCFF)
		for i(0, ^gen1 - 2)
			do draw@line(
			|gen1[i].x, gen1[i].y, gen1[i + 1].x, gen1[i + 1].y, 0xFF000000)
		end for
		
		do draw@render(60)
	end while
end func
